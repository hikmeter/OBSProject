@model List<ResultTranscriptDto>
@{
    ViewData["Title"] = "Transcript";
    Layout = "~/Views/AdminLayout/Index.cshtml";
    int count = 0;
    double toplamKredi = 0;
    double toplamNot = 0;
    var notKatsayilari = new Dictionary<string, double>(StringComparer.OrdinalIgnoreCase)
    {
        { "AA", 4.00 }, { "BA", 3.50 }, { "BB", 3.25 }, { "CB", 3.00 },
        { "CC", 2.50 }, { "DC", 2.25 }, { "DD", 2.00 }, { "FD", 1.50 }, { "FF", 0.0 }
    };
    string GetColor(string grade) => grade switch
    {
        "AA" or "BA" => "bg-success text-white",
        "BB" => "bg-info text-white",
        "CB" => "bg-primary-subtle",
        "CC" => "bg-primary text-white",
        "DC" => "bg-warning-subtle",
        "DD" => "bg-warning text-dark",
        "FD" => "bg-danger-subtle",
        "FF" => "bg-danger text-white",
        _ => ""
    };
    string GetPassIcon(bool isPassed) => isPassed
        ? "<i class='bi bi-check-circle-fill text-success fs-5'></i>"
        : "<i class='bi bi-x-circle-fill text-danger fs-5'></i>";
}

<div class="page-content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-12">
                <div class="card shadow-sm border-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div>
                                <h4 class="mb-1">📄 Öğrenci Transkripti</h4>
                                <p class="text-muted mb-0">Aşağıda öğrencinin aldığı dersler, kredileri, notları ve geçme durumu yer almaktadır.</p>
                            </div>
                        </div>
                        <div class="mb-3 d-flex gap-2">
                            <button id="printBtn" class="btn btn-primary" onclick="printPage(this)">🖨️ Yazdır</button>
                            <button id="pdfBtn" class="btn btn-danger" onclick="downloadPDF(this)">📄 PDF İndir</button>
                            <button id="excelBtn" class="btn btn-success" onclick="downloadExcel(this)">📊 Excel İndir</button>
                        </div>
                        @if (Model != null && Model.Count > 0)
                        {
                            <div id="transcript-content" class="table-responsive">
                                <table class="table table-striped table-bordered align-middle">
                                    <thead class="table-light">
                                        <tr>
                                            <th>#</th>
                                            <th>Ders Kodu</th>
                                            <th>Ders Adı</th>
                                            <th>AKTS</th>
                                            <th>Harf Notu</th>
                                            <th>Geçti mi?</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model)
                                        {
                                            count++;
                                            double kredi = item.credit;
                                            toplamKredi += kredi;
                                            double katsayi = notKatsayilari.TryGetValue(item.letterGrade, out double val) ? val : 0;
                                            toplamNot += kredi * katsayi;
                                            <tr>
                                                <td>@count</td>
                                                <td>@item.courseCode</td>
                                                <td>@item.courseName</td>
                                                <td>@item.credit</td>
                                                <td class="@GetColor(item.letterGrade) fw-semibold text-center">@item.letterGrade</td>
                                                <td class="text-center">@Html.Raw(GetPassIcon(item.isPassed))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="mt-3">
                                <div class="alert alert-secondary">
                                    <strong>📊 Genel Not Ortalaması (GANO):</strong>
                                    @{
                                        var gano = toplamKredi > 0 ? toplamNot / toplamKredi : 0;
                                    }
                                    <span class="fw-bold text-primary">@gano.ToString("0.00")</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info mt-3">
                                Öğrencinin aldığı ders bulunmamaktadır.
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
    <div id="toastMessage" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                İşlem başarılı!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.js"></script>
<script>
    function showToast(message) {
        const toastEl = document.getElementById('toastMessage');
        toastEl.querySelector('.toast-body').textContent = message;
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    }
    function getFormattedDate() {
        const now = new Date();
        return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}-${now.getMinutes().toString().padStart(2, '0')}`;
    }
    function downloadPDF() {
        const element = document.getElementById("transcript-content");
        const opt = {
            margin:       1,
            filename:     `transkript_${getFormattedDate()}.pdf`,
            image:        { type: 'jpeg', quality: 0.98 },
            html2canvas:  { scale: 2 },
            jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
        };
        html2pdf().from(element).set(opt).save();
        showToast('PDF başarıyla indirildi.');
    }
    function downloadExcel() {
        const table = document.querySelector("table");
        const wb = XLSX.utils.table_to_book(table, { sheet: "Transkript" });
        const filename = `transkript_${getFormattedDate()}.xlsx`;
        XLSX.writeFile(wb, filename);
        showToast('Excel başarıyla indirildi.');
    }
    function printPage() {
        window.print();
        showToast('Sayfa başarıyla yazdırıldı.');
    }
</script>